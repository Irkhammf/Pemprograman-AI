# -*- coding: utf-8 -*-
"""Tupro4_Kel1_MobilRank

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/100gof5WZfv0W8IMRO81tpZvPPdoeI-9y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Membaca file excel
def data_excel(data):
    xls = pd.read_excel(data)
    return xls

#Memasukkan data excel ke dalam variabel
df = data_excel('mobil.xls')
df

df.info()

df = df.rename({'Nama Mobil' : 'Name'}, axis=1)
train = df.rename({'Harga (Ratus Juta)' : 'Harga'}, axis=1)
train = train.drop('Name', axis=1)

#Data train (data yang sudah diclear sehingga hanya memiliki nilai integer dan float)
train

train.info()

#Membangun data inputan yang bakal ditest
def testData(data, tr) :
    test = data.copy()
    test['Ukuran'] = round(np.mean(tr['Ukuran']))
    test['Kenyamanan'] = round(np.mean(tr['Kenyamanan']))
    test['Irit'] = round(np.mean(tr['Irit']))
    test['Kecepatan'] = round(np.mean(tr['Kecepatan']))
    test['Harga'] = np.mean(tr['Harga'])
    print(test)
    return test

#Menampilkan data test
test = testData(train.loc[0], train)

##Rumus kNN##

def euclidian (trainData, testData):
    return (((testData['Ukuran']- trainData['Ukuran'])**2) + ((testData['Kenyamanan']- trainData['Kenyamanan'])**2) + ((testData['Irit']- trainData['Irit'])**2) + ((testData['Kecepatan']- trainData['Kecepatan'])**2) + ((testData['Harga']- trainData['Harga'])**2))**(1/2)

def manhattan (trainData, testData):
    return ((abs(testData['Ukuran']- trainData['Ukuran'])) + (abs(testData['Kenyamanan']- trainData['Kenyamanan'])) + (abs(testData['Irit']- trainData['Irit'])) + (abs(testData['Kecepatan']- trainData['Kecepatan'])) + (abs(testData['Harga']- trainData['Harga'])))

def minkowski (trainData, testData, h = 1.5):
    return ((abs(testData['Ukuran']- trainData['Ukuran'])**h) + (abs(testData['Kenyamanan']- trainData['Kenyamanan'])**h) + (abs(testData['Irit']- trainData['Irit'])**h) + (abs(testData['Kecepatan']- trainData['Kecepatan'])**h) + (abs(testData['Harga']- trainData['Harga'])**h))**(1/h)

def supremum (trainData, testData):
    tmp = []
    tmp.append(abs(testData['Ukuran']- trainData['Ukuran']))
    tmp.append(abs(testData['Kenyamanan']- trainData['Kenyamanan']))
    tmp.append(abs(testData['Irit']- trainData['Irit']))
    tmp.append(abs(testData['Kecepatan']- trainData['Kecepatan']))
    tmp.append(abs(testData['Harga']- trainData['Harga']))
    return max(tmp)

#Menghitung jarak dengan masing - masing rumus
Jarak_Euclidian = []
Jarak_Manhattan = []
Jarak_Minkowski = []
Jarak_Supremum = []

for i in range(len(train)):
    Jarak_Euclidian.append(euclidian(train.loc[i], test))
    Jarak_Manhattan.append(manhattan(train.loc[i], test))
    Jarak_Minkowski.append(minkowski(train.loc[i], test))
    Jarak_Supremum.append(supremum(train.loc[i], test))

#Menampilkan nilai jarak dari masing - masing rumus
print(Jarak_Euclidian)
print(Jarak_Manhattan)
print(Jarak_Minkowski)
print(Jarak_Supremum)

##Data Analisis##

#Euclidian
plt.bar(range(len(Jarak_Euclidian)), Jarak_Euclidian)

#Manhattan
plt.bar(range(len(Jarak_Manhattan)), Jarak_Manhattan)

#Minkowski
plt.bar(range(len(Jarak_Minkowski)), Jarak_Minkowski)

#Supremum
plt.bar(range(len(Jarak_Supremum)), Jarak_Supremum)

#Mencari kelas mobil dominan dari 3 mobil terrekomendasi
def prediksi(mobil):
    domClass = [0, 0, 0, 0, 0, 0, 0, 0]
    for i in range(len(mobil)):
        if mobil[i][0] == 'H' and mobil[i][4] == 'a':
            domClass[0]+=1
        elif mobil[i][0] == 'T' and mobil[i][5] == 'a':
            domClass[1]+=1
        elif mobil[i][0] == 'S' and mobil[i][5] == 'i':
            domClass[2]+=1
        elif mobil[i][0] == 'L' and mobil[i][5] == 'a':
            domClass[3]+=1
        elif mobil[i][0] == 'X' and mobil[i][6] == 'r':
            domClass[4]+=1
        elif mobil[i][0] == 'K' and mobil[i][6] == 'n':
            domClass[5]+=1
        elif mobil[i][0] == 'A' and mobil[i][6] == 'd':
            domClass[6]+=1
        else:
            domClass[7]+=1
    return domClass

#Menampilkan kelas dari data yang ditest
def class_test(pred):
    if max(pred) == 1:
        print('Mobil unik/tidak termasuk dalam kelas yang ada')
    elif max(pred) == pred[0]:
        print('Mobil termasuk kelas Honda')
    elif max(pred) == pred[1]:
        print('Mobil termasuk kelas Toyota')
    elif max(pred) == pred[2]:
        print('Mobil termasuk kelas Suzuki')
    elif max(pred) == pred[3]:
        print('Mobil termasuk kelas Livina')
    elif max(pred) == pred[4]:
        print('Mobil termasuk kelas Xpander')
    elif max(pred) == pred[5]:
        print('Mobil termasuk kelas Karimun')
    elif max(pred) == pred[6]:
        print('Mobil termasuk kelas Alphard')
    elif max(pred) == pred[7]:
        print('Mobil termasuk kelas Daihatsu')

#Honda = 1
#Toyota = 2
#Suzuki = 3
#Livina = 4
#Xpander = 5
#Karimun = 6
#Alphard = 7
#Daihatsu = 8

#3 Jarak terdekat menggunakan masing - masing rumus jarak
def terdekat(jarak):
    result = []
    mobil = []
    best = sorted(jarak)
    tmp = []
    marked = []
    bestCar = []
    for i in range(3):
        for j in range(len(jarak)):
            if best[i] == jarak[j] and j not in marked:
                bestCar.append(df.loc[j].Name)
                result.append(best[i])
                marked.append(j)
                if len(result) == 3:
                    return result, bestCar

##Main##

hasil, mobil_terbaik = terdekat(Jarak_Minkowski)

bestValue = sorted(zip(mobil_terbaik, hasil), key=lambda x:x[1], reverse=False)
display(bestValue)
prediksi_Class = prediksi(mobil_terbaik)
print(prediksi_Class)
class_test(prediksi_Class)

mobil_Terrekomendasi = [('Nama Mobil', 'Jarak')]
for i in range(len(bestValue)) :
    mobil_Terrekomendasi.append(bestValue[i])
display(mobil_Terrekomendasi)

#Melakukan output file rekomendasi.xls yang berisi 3 mobil terrekomendasi
pd.DataFrame(mobil_Terrekomendasi).to_excel('rekomendasi.xls', header=False, index=False)

rekomendasi = pd.read_excel('rekomendasi.xls')

rekomendasi